{"version":3,"sources":["cfmToErb.js","cfmToRb.js","cfquery.js","Converter.js","App.js","reportWebVitals.js","index.js"],"names":["SINGLE_TAGS","parse","text","data","split","root","MyNode","parent","forEach","t","index","match","tag","add","includes","name","content","this","children","node","push","first","convert","convert_root","tmp","replaceAll","p1","expression_in_tag","length","trim","replace","convert_cfif","arr","begin","countA","countB","i","join","convert_text","convert_cfelseif","p2","convert_cfset","query","underscore","convert_cfloop","convert_default","childNode","toLowerCase","remove_comment","params","pre","Set","type","value","has_time_zone_now","has","delete","args","Array","from","map","convert_cfquery","Converter","useState","mode","setMode","cfm","setCfm","bt","className","onChange","e","target","placeholder","defaultValue","cbs","reduce","_","cb","cfmToErb","cfmToRb","cfquery","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e92c8f2.chunk.js","sourcesContent":["export default function cfmToErb(text) {\n  return flow([parse, convert, remove_comment])(text);\n}\n\nconst SINGLE_TAGS = [\n  \"cfset\", \"cfcontinue\", \"cfelse\", \"cfelseif\", \"cfqueryparam\", \"cfparam\", \"cfbreak\", \"cfinclude\"\n];\n\nfunction flow(cbs) {\n  return text => cbs.reduce((_, cb) => cb(_), text);\n}\n\nfunction parse(text) {\n  const data = text.split(/(<cf[\\s\\S]+?>|<\\/cf.*?>)/);\n  let root = new MyNode('root');\n\n  var parent = root;\n  data.forEach((t, index) => {\n    if(t.match(/<cf[\\s\\S]+?>/)) {\n      let match = t.match(/<(cf[a-z]+)[\\s\\S]*?>/);\n      if(match) {\n        const tag = new MyNode(match[1], match[0]);\n        parent.add(tag);\n        if(SINGLE_TAGS.includes(tag.name)) return;\n\n        parent = tag;\n      }\n    } else if (t.match(/<\\/cf.*?>/)) {\n      let match = t.match(/<\\/(cf.*?)>/);\n      if(match && match[1] === parent.name) parent = parent.parent;\n    } else {\n      parent.add(new MyNode('text', t))\n    }\n  });\n\n  return root;\n}\n\nfunction MyNode(name, content = \"\") {\n  this.name = name;\n  this.content = content;\n  this.children = [];\n\n  this.add = function(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  this.first = function(node) {\n    return this.children[0];\n  }\n}\n\nfunction convert(node) {\n  switch (node.name) {\n    case 'root':\n      return convert_root(node);\n    case 'cfif':\n      return convert_cfif(node);\n    case 'text':\n      return convert_text(node);\n    case 'cfelse':\n      return '<% else %>';\n    case 'cfelseif':\n      return convert_cfelseif(node);\n    case 'cfset':\n      return convert_cfset(node);\n    case 'cfbreak':\n      return '<% break %>';\n    case 'cfloop':\n      return convert_cfloop(node);\n    default:\n      return convert_default(node);\n  }\n}\n\nfunction convert_text(node){\n  let text = node.content;\n  text = text.replaceAll(/##/g, \"==@@\");\n  if(!text.match(/#/)) return text.replaceAll(\"==@@\", \"#\");\n\n  let arr = text.split(/([\"#])/);\n\n  let begin = -1;\n  let countA = 0;\n  let countB = 0;\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] === \"#\") {\n      if(begin === -1) begin = i;\n\n      countA += 1;\n      if (countA > 0 && countA % 2 === 0 && countB % 2 === 0 && begin !== -1) {\n        arr[begin] = \"<%= \";\n        arr[i] = \" %>\";\n\n        countA = 0;\n        countB = 0;\n        begin = -1;\n      }\n      continue;\n    }\n\n    if(countA > 0 && arr[i] === '\"') {\n      countB += 1;\n      continue;\n    }\n  }\n\n  return arr.join(\"\").replaceAll(\"==@@\", \"#\");\n}\n\nfunction convert_cfif(node) {\n  let tmp = node.content.replaceAll(/<cfif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `<% if ${expression_in_tag(p1)} %>`;\n  });\n\n  if(node.children.length === 1 &&\n    node.first().name === \"text\" &&\n    node.first().content.trim().length < 40 &&\n    node.first().content.trim().length > 0) {\n\n    return tmp.replace(\"<% if\", `<%= \"${node.first().content}\" if`);\n  }\n\n  tmp += convert_root(node);\n  tmp += \"<% end %>\";\n\n  return tmp;\n}\n\nfunction expression_in_tag(text) {\n  return text.trim()\n    .replaceAll(/is equal/gi, \"==\")\n    .replaceAll(/ eq /gi, \" == \")\n    .replaceAll(/ is not /gi, \" != \")\n    .replaceAll(/not equal/gi, \"!=\")\n    .replaceAll(/ neq /gi, \" != \")\n    .replaceAll(/greater than/gi, \">\")\n    .replaceAll(/ gt /gi, \" > \")\n    .replaceAll(/less than/gi, \"<\")\n    .replaceAll(/ lt /gi, \" < \")\n    .replaceAll(/greater than or equal to/gi, \">=\")\n    .replaceAll(/ gte /gi, \" >= \")\n    .replaceAll(/ ge /gi, \" >= \")\n    .replaceAll(/less than or equal to/gi, \"<=\")\n    .replaceAll(/ lte /gi, \" <= \")\n    .replaceAll(/ le /gi, \" <= \")\n    .replaceAll(/ is /gi, \" == \")\n    .replaceAll(/ and /gi, \" && \")\n    .replaceAll(/ or /gi, \" || \")\n    .replaceAll(/chkPermission\\(\"([\\w\"]+)\"\\) (is|==) 1/g, 'chk_permission?(\"$1\")')\n    .replaceAll(/ == \"\"/g, \".blank?\");\n}\n\nfunction convert_root(node) {\n  let tmp = \"\";\n  node.children.forEach((childNode) => {\n    tmp += convert(childNode);\n  });\n\n  return tmp;\n}\n\nfunction convert_default(node) {\n  let tmp = node.content;\n  if(SINGLE_TAGS.includes(node.name)) return tmp;\n\n  tmp += convert_root(node);\n  tmp += `</${node.name}>`;\n\n  return tmp;\n}\n\nfunction convert_cfelseif(node) {\n  return node.content.replaceAll(/<cfelseif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `<% elsif ${expression_in_tag(p1)} %>`;\n  });\n}\n\nfunction convert_cfset(node) {\n  return node.content.replaceAll(/<cfset ([\\w.]+?) = ([\\s\\S]*?)>/g, (match, p1, p2) => {\n    return `<% ${p1} = ${expression_in_tag(p2)} %>`;\n  });\n}\n\nfunction convert_cfloop(node) {\n  let query = node.content.match(/query=\"(\\w+?)\"/);\n  if(!query) return node.content;\n\n  let tmp = `<% @${query[1]}.each do |${underscore(query[1])}| %>`\n  tmp += convert_root(node);\n  tmp += \"<% end %>\";\n  return tmp.replaceAll(query[1], underscore(query[1]));\n}\n\nfunction underscore(text) {\n  return text.replaceAll(/(?=.)([A-Z])/g, (match, p1) => `_${p1.toLowerCase()}`)\n}\n\nfunction remove_comment(text) {\n  return text.replaceAll(/<!---[\\s\\S]*?--->/g, \"\");\n}\n","export default function cfmToErb(text) {\n  return flow([parse, convert, remove_comment])(text);\n}\n\nconst SINGLE_TAGS = [\n  \"cfset\", \"cfcontinue\", \"cfelse\", \"cfelseif\", \"cfqueryparam\", \"cfparam\", \"cfbreak\", \"cfinclude\"\n];\n\nfunction flow(cbs) {\n  return text => cbs.reduce((_, cb) => cb(_), text);\n}\n\nfunction parse(text) {\n  const data = text.split(/(<cf[\\s\\S]+?>|<\\/cf.*?>)/);\n  let root = new MyNode('root');\n\n  var parent = root;\n  data.forEach((t, index) => {\n    if(t.match(/<cf[\\s\\S]+?>/)) {\n      let match = t.match(/<(cf[a-z]+)[\\s\\S]*?>/);\n      if(match) {\n        const tag = new MyNode(match[1], match[0]);\n        parent.add(tag);\n        if(SINGLE_TAGS.includes(tag.name)) return;\n\n        parent = tag;\n      }\n    } else if (t.match(/<\\/cf.*?>/)) {\n      let match = t.match(/<\\/(cf.*?)>/);\n      if(match && match[1] === parent.name) parent = parent.parent;\n    } else {\n      parent.add(new MyNode('text', t))\n    }\n  });\n\n  return root;\n}\n\nfunction MyNode(name, content = \"\") {\n  this.name = name;\n  this.content = content;\n  this.children = [];\n\n  this.add = function(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  this.first = function(node) {\n    return this.children[0];\n  }\n}\n\nfunction convert(node) {\n  switch (node.name) {\n    case 'root':\n      return convert_root(node);\n    case 'cfif':\n      return convert_cfif(node);\n    case 'text':\n      return convert_text(node);\n    case 'cfelse':\n      return 'else';\n    case 'cfelseif':\n      return convert_cfelseif(node);\n    case 'cfset':\n      return convert_cfset(node);\n    case 'cfbreak':\n      return 'break';\n    case 'cfloop':\n      return convert_cfloop(node);\n    default:\n      return convert_default(node);\n  }\n}\n\nfunction convert_text(node){\n  return node.content;\n}\n\nfunction convert_cfif(node) {\n  let tmp = node.content.replaceAll(/<cfif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `if ${expression_in_tag(p1)}`;\n  });\n\n  if(node.children.length === 1 &&\n    node.first().name === \"text\" &&\n    node.first().content.trim().length < 40 &&\n    node.first().content.trim().length > 0) {\n\n    return tmp.replace(\"if\", `\"${node.first().content}\" if`);\n  }\n\n  tmp += convert_root(node);\n  tmp += \"end\";\n\n  return tmp;\n}\n\nfunction expression_in_tag(text) {\n  return text.trim()\n    .replaceAll(/is equal/gi, \"==\")\n    .replaceAll(/ eq /gi, \" == \")\n    .replaceAll(/ is not /gi, \" != \")\n    .replaceAll(/not equal/gi, \"!=\")\n    .replaceAll(/ neq /gi, \" != \")\n    .replaceAll(/greater than/gi, \">\")\n    .replaceAll(/ gt /gi, \" > \")\n    .replaceAll(/less than/gi, \"<\")\n    .replaceAll(/ lt /gi, \" < \")\n    .replaceAll(/greater than or equal to/gi, \">=\")\n    .replaceAll(/ gte /gi, \" >= \")\n    .replaceAll(/ ge /gi, \" >= \")\n    .replaceAll(/less than or equal to/gi, \"<=\")\n    .replaceAll(/ lte /gi, \" <= \")\n    .replaceAll(/ le /gi, \" <= \")\n    .replaceAll(/ is /gi, \" == \")\n    .replaceAll(/ and /gi, \" && \")\n    .replaceAll(/ or /gi, \" || \")\n    .replaceAll(/chkPermission\\(\"([\\w\"]+)\"\\) (is|==) 1/g, 'chk_permission?(\"$1\")')\n    .replaceAll(/ == \"\"/g, \".blank?\");\n}\n\n\nfunction convert_root(node) {\n  let tmp = \"\";\n  node.children.forEach((childNode) => {\n    tmp += convert(childNode);\n  });\n\n  return tmp;\n}\n\nfunction convert_default(node) {\n  let tmp = node.content;\n  if(SINGLE_TAGS.includes(node.name)) return tmp;\n\n  tmp += convert_root(node);\n  tmp += `</${node.name}>`;\n\n  return tmp;\n}\n\nfunction convert_cfelseif(node) {\n  return node.content.replaceAll(/<cfelseif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `elsif ${expression_in_tag(p1)}`;\n  });\n}\n\nfunction convert_cfset(node) {\n  if(node.content.match(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/))\n    return node.content.replace(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/, \"@error_msg << $1\")\n\n  return node.content.replaceAll(/<cfset ([\\w.]+?) = ([\\s\\S]*?)>/g, (match, p1, p2) => {\n    return `${p1} = ${expression_in_tag(p2)}`;\n  });\n}\n\nfunction convert_cfloop(node) {\n  let query = node.content.match(/query=\"(\\w+?)\"/);\n  if(!query) return node.content;\n\n  let tmp = `@${query[1]}.each do |${underscore(query[1])}|`\n  tmp += convert_root(node);\n  tmp += \"end\";\n  return tmp.replaceAll(query[1], underscore(query[1]));\n}\n\nfunction underscore(text) {\n  return text.replaceAll(/(?=.)([A-Z])/g, (match, p1) => `_${p1.toLowerCase()}`)\n}\n\nfunction remove_comment(text) {\n  return text.replaceAll(/<!---[\\s\\S]*?--->/g, \"\");\n}\n","export default function cfquery(text) {\n  return flow([pre, parse, convert])(text);\n}\n\nvar params;\nconst SINGLE_TAGS = [\n  \"cfset\", \"cfcontinue\", \"cfelse\", \"cfelseif\", \"cfqueryparam\", \"cfparam\", \"cfbreak\"\n];\n\nfunction flow(cbs) {\n  return text => cbs.reduce((_, cb) => cb(_), text);\n}\n\nfunction pre(text) {\n  params = new Set();\n\n  return text.replaceAll(/<cfqueryparam.*?value=\"#([\\w.]+?)#\".*?>/g, (match, p1) => {\n    let name = p1.replaceAll(\".\", \"_\");\n    params.add(name);\n    return \":\" + name;\n  }).replaceAll(/<cfqueryparam cfsqltype=\"CF_SQL_TIMESTAMP\" value=\"#Now\\(\\)#\">/g, (match) => {\n    params.add(\"time_zone_now\");\n    return \":time_zone_now\";\n  }).replaceAll(/<cfqueryparam(.*?)>/g, (match, p1) => {\n    let type = p1.match(/cfsqltype=\"(.*?)\"/);\n    let value = p1.match(/value=\"(.*?)\"/);\n\n    if(!type || !value) return match;\n\n    switch (type[1]) {\n      case \"CF_SQL_VARCHAR\":\n        return value[1];\n      case \"CF_SQL_INTEGER\":\n        return value[1];\n      default:\n        return value[1];\n    }\n  });\n}\n\nfunction parse(text) {\n  const data = text.split(/(<cf[\\s\\S]+?>|<\\/cf.*?>)/);\n  let root = new MyNode('root');\n\n  var parent = root;\n  data.forEach((t, index) => {\n    if(t.match(/<cf[\\s\\S]+?>/)) {\n      let match = t.match(/<(cf[a-z]+)[\\s\\S]*?>/);\n      if(match) {\n        const tag = new MyNode(match[1], match[0]);\n        parent.add(tag);\n        if(SINGLE_TAGS.includes(tag.name)) return;\n\n        parent = tag;\n      }\n    } else if (t.match(/<\\/cf.*?>/)) {\n      let match = t.match(/<\\/(cf.*?)>/);\n      if(match && match[1] === parent.name) parent = parent.parent;\n    } else {\n      parent.add(new MyNode('text', t))\n    }\n  });\n\n  return root;\n}\n\nfunction convert(node) {\n  switch (node.name) {\n    case 'root':\n      return convert_root(node);\n    case 'cfif':\n      return convert_cfif(node);\n    case 'text':\n      return convert_text(node);\n    case 'cfelse':\n      return 'else';\n    case 'cfelseif':\n      return convert_cfelseif(node);\n    case 'cfset':\n      return convert_cfset(node);\n    case 'cfquery':\n      return convert_cfquery(node);\n    default:\n      return convert_default(node);\n  }\n}\n\nfunction convert_text(node){\n  if(node.content.trim() === \"\") return \"\";\n\n  return `\\tsql += \"${node.content.trim()}\"\\n`;\n}\n\nfunction convert_cfif(node) {\n  let tmp = node.content.replace(/<cfif ([\\s\\S]*?)>/, (match, p1) => {\n    return `if ${expression_in_tag(p1)}\\n`;\n  });\n\n  node.children.forEach(function(childNode) {\n    if(childNode.name === \"text\") {\n      tmp += `sql += \"${childNode.content.trim()}\"\\n`;\n    } else {\n      tmp += convert(childNode);\n    }\n  });\n\n  tmp += \"end\\n\";\n  return tmp;\n}\n\nfunction expression_in_tag(text) {\n  return text.trim()\n    .replaceAll(/is equal/gi, \"==\")\n    .replaceAll(/ eq /gi, \" == \")\n    .replaceAll(/ is not /gi, \" != \")\n    .replaceAll(/not equal/gi, \"!=\")\n    .replaceAll(/ neq /gi, \" != \")\n    .replaceAll(/greater than/gi, \">\")\n    .replaceAll(/ gt /gi, \" > \")\n    .replaceAll(/less than/gi, \"<\")\n    .replaceAll(/ lt /gi, \" < \")\n    .replaceAll(/greater than or equal to/gi, \">=\")\n    .replaceAll(/ gte /gi, \" >= \")\n    .replaceAll(/ ge /gi, \" >= \")\n    .replaceAll(/less than or equal to/gi, \"<=\")\n    .replaceAll(/ lte /gi, \" <= \")\n    .replaceAll(/ le /gi, \" <= \")\n    .replaceAll(/ is /gi, \" == \")\n    .replaceAll(/ and /gi, \" && \")\n    .replaceAll(/ or /gi, \" || \")\n    .replaceAll(/chkPermission\\(\"([\\w\"]+)\"\\) (is|==) 1/g, 'chk_permission?(\"$1\")')\n    .replaceAll(/ == \"\"/g, \".blank?\");\n}\n\nfunction MyNode(name, content = \"\") {\n  this.name = name;\n  this.content = content;\n  this.children = [];\n\n  this.add = function(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  this.first = function(node) {\n    return this.children[0];\n  }\n}\n\nfunction convert_root(node) {\n  let tmp = \"\";\n  node.children.forEach((childNode) => {\n    tmp += convert(childNode);\n  });\n\n  return tmp;\n}\n\nfunction convert_default(node) {\n  let tmp = node.content;\n  if(SINGLE_TAGS.includes(node.name)) return tmp;\n\n  tmp += convert_root(node);\n  tmp += `</${node.name}>`;\n\n  return tmp;\n}\n\nfunction convert_cfelseif(node) {\n  return node.content.replace(/<cfelseif ([\\s\\S]*?)>/, (match, p1) => {\n    return `elsif ${expression_in_tag(p1)}\\n`;\n  });\n}\n\nfunction convert_cfset(node) {\n  if(node.content.match(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/))\n    return node.content.replace(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/, \"@error_msg << $1\")\n\n  return node.content.replaceAll(/<cfset ([\\w.]+?) = ([\\s\\S]*?)>/g, (match, p1, p2) => {\n    return `${p1} = ${expression_in_tag(p2)}`;\n  });\n}\n\nfunction convert_cfquery(node) {\n  let match = node.content.match(/name=\"(\\w+)\"/)\n  if(!match) return node.content;\n\n  let has_time_zone_now = params.has(\"time_zone_now\");\n  params.delete(\"time_zone_now\")\n  let args = Array.from(params);\n  let tmp = `def ${match[1]}(${args.join(\", \")})\\n`;\n\n  if(node.first().name === \"text\")\n    tmp += `\\tsql = \"${node.first().content}\"\\n`;\n  else tmp += '\\tsql = \"\"\\n';\n\n  node.children.forEach((childNode, index) => {\n    if(childNode.name === \"text\" && index === 0) return;\n    tmp += \"\\t\" + convert(childNode);\n  });\n\n  args = args.map((value) => `${value}: ${value}`)\n  tmp += `\\n\\tfind_by_sql [sql, {${args.join(\", \")}${has_time_zone_now ? \", time_zone_now: Time.zone.now\" : \"\"}}]`;\n  tmp += \"\\nend\";\n\n  return tmp;\n}\n","import React, { useState } from 'react';\nimport cfmToErb from './cfmToErb';\nimport cfmToRb from './cfmToRb';\nimport cfquery from './cfquery';\n\nfunction Converter() {\n  const [mode, setMode] = useState(\"erb\");\n  const [cfm, setCfm] = useState(\"\");\n\n  const bt = (t) => t.replaceAll(\"\t\", \"  \");\n\n  const handleChangeTaCfm = (e) => {\n    const text = e.target.value;\n    setCfm(text);\n  }\n\n  const handleChangeSelect = (e) => {\n    setMode(e.target.value);\n  }\n\n  function convert_text(text) {\n    if(mode === \"erb\")\n      return bt(cfmToErb(text));\n    if(mode === \"rb\")\n      return bt(cfmToRb(text));\n    if(mode === \"cfquery\")\n      return bt(cfquery(text));\n  }\n\n  return (\n    <div className=\"Converter\">\n      <div className=\"select\">\n        <select value={mode} onChange={handleChangeSelect}>\n          <option value=\"erb\">Erb</option>\n          <option value=\"rb\">Rb</option>\n          <option value=\"cfquery\">cfquery</option>\n        </select>\n      </div>\n      <div className=\"box\">\n        <div className=\"cfm\">\n          <textarea className=\"ta_cfm\" onChange={handleChangeTaCfm} value={cfm} placeholder=\"cfm...\">\n          </textarea>\n        </div>\n        <div className=\"erb\">\n          <textarea className=\"ta_erb\" defaultValue={convert_text(cfm)} placeholder={`${mode}...`}>\n          </textarea>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Converter;\n","import Converter from './Converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter></Converter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}