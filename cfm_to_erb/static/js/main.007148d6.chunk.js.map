{"version":3,"sources":["cfquery.js","lib.js","cfmToErb.js","cfmToRb.js","Converter.js","App.js","reportWebVitals.js","index.js"],"names":["params","SINGLE_TAGS","MyNode","name","content","this","children","add","node","push","parent","first","parse","text","data","split","root","forEach","t","index","match","tag","includes","expression_in_tag","trim","replaceAll","convert","convert_root","tmp","p1","length","replace","convert_cfif","arr","begin","countA","countB","i","join","convert_text","convert_cfelseif","p2","convert_cfset","from","to","step","query","underscore","convert_default","convert_cfloop","childNode","toLowerCase","remove_comment","pre","Set","type","value","has_time_zone_now","has","delete","args","Array","map","convert_cfquery","Converter","useState","mode","setMode","cfm","setCfm","bt","className","onChange","e","target","placeholder","defaultValue","cbs","reduce","_","cb","cfmToErb","cfmToRb","cfquery","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.007148d6.chunk.js","sourcesContent":["export default function cfquery(text) {\n  return flow([pre, parse, convert])(text);\n}\n\nvar params;\nconst SINGLE_TAGS = [\n  \"cfset\", \"cfcontinue\", \"cfelse\", \"cfelseif\", \"cfqueryparam\", \"cfparam\", \"cfbreak\"\n];\n\nfunction flow(cbs) {\n  return text => cbs.reduce((_, cb) => cb(_), text);\n}\n\nfunction pre(text) {\n  params = new Set();\n\n  return text.replaceAll(/<cfqueryparam.*?value=\"#([\\w.]+?)#\".*?>/g, (match, p1) => {\n    let name = p1.replaceAll(\".\", \"_\");\n    params.add(name);\n    return \":\" + name;\n  }).replaceAll(/<cfqueryparam cfsqltype=\"CF_SQL_TIMESTAMP\" value=\"#Now\\(\\)#\">/g, (match) => {\n    params.add(\"time_zone_now\");\n    return \":time_zone_now\";\n  }).replaceAll(/<cfqueryparam(.*?)>/g, (match, p1) => {\n    let type = p1.match(/cfsqltype=\"(.*?)\"/);\n    let value = p1.match(/value=\"(.*?)\"/);\n\n    if(!type || !value) return match;\n\n    switch (type[1]) {\n      case \"CF_SQL_VARCHAR\":\n        return value[1];\n      case \"CF_SQL_INTEGER\":\n        return value[1];\n      default:\n        return value[1];\n    }\n  });\n}\n\nfunction parse(text) {\n  const data = text.split(/(<cf[\\s\\S]+?>|<\\/cf.*?>)/);\n  let root = new MyNode('root');\n\n  var parent = root;\n  data.forEach((t, index) => {\n    if(t.match(/<cf[\\s\\S]+?>/)) {\n      let match = t.match(/<(cf[a-z]+)[\\s\\S]*?>/);\n      if(match) {\n        const tag = new MyNode(match[1], match[0]);\n        parent.add(tag);\n        if(SINGLE_TAGS.includes(tag.name)) return;\n\n        parent = tag;\n      }\n    } else if (t.match(/<\\/cf.*?>/)) {\n      let match = t.match(/<\\/(cf.*?)>/);\n      if(match && match[1] === parent.name) parent = parent.parent;\n    } else {\n      parent.add(new MyNode('text', t))\n    }\n  });\n\n  return root;\n}\n\nfunction convert(node) {\n  switch (node.name) {\n    case 'root':\n      return convert_root(node);\n    case 'cfif':\n      return convert_cfif(node);\n    case 'text':\n      return convert_text(node);\n    case 'cfelse':\n      return 'else';\n    case 'cfelseif':\n      return convert_cfelseif(node);\n    case 'cfset':\n      return convert_cfset(node);\n    case 'cfquery':\n      return convert_cfquery(node);\n    default:\n      return convert_default(node);\n  }\n}\n\nfunction convert_text(node){\n  if(node.content.trim() === \"\") return \"\";\n\n  return `\\tsql += \"${node.content.trim()}\"\\n`;\n}\n\nfunction convert_cfif(node) {\n  let tmp = node.content.replace(/<cfif ([\\s\\S]*?)>/, (match, p1) => {\n    return `if ${expression_in_tag(p1)}\\n`;\n  });\n\n  node.children.forEach(function(childNode) {\n    if(childNode.name === \"text\") {\n      tmp += `sql += \"${childNode.content.trim()}\"\\n`;\n    } else {\n      tmp += convert(childNode);\n    }\n  });\n\n  tmp += \"end\\n\";\n  return tmp;\n}\n\nfunction expression_in_tag(text) {\n  return text.trim()\n    .replaceAll(/is equal/gi, \"==\")\n    .replaceAll(/ eq /gi, \" == \")\n    .replaceAll(/ is not /gi, \" != \")\n    .replaceAll(/not equal/gi, \"!=\")\n    .replaceAll(/ neq /gi, \" != \")\n    .replaceAll(/greater than/gi, \">\")\n    .replaceAll(/ gt /gi, \" > \")\n    .replaceAll(/less than/gi, \"<\")\n    .replaceAll(/ lt /gi, \" < \")\n    .replaceAll(/greater than or equal to/gi, \">=\")\n    .replaceAll(/ gte /gi, \" >= \")\n    .replaceAll(/ ge /gi, \" >= \")\n    .replaceAll(/less than or equal to/gi, \"<=\")\n    .replaceAll(/ lte /gi, \" <= \")\n    .replaceAll(/ le /gi, \" <= \")\n    .replaceAll(/ is /gi, \" == \")\n    .replaceAll(/ and /gi, \" && \")\n    .replaceAll(/ or /gi, \" || \")\n    .replaceAll(/chkPermission\\(\"([\\w\"]+)\"\\) (is|==) 1/g, 'chk_permission?(\"$1\")')\n    .replaceAll(/ == \"\"/g, \".blank?\");\n}\n\nfunction MyNode(name, content = \"\") {\n  this.name = name;\n  this.content = content;\n  this.children = [];\n\n  this.add = function(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  this.first = function(node) {\n    return this.children[0];\n  }\n}\n\nfunction convert_root(node) {\n  let tmp = \"\";\n  node.children.forEach((childNode) => {\n    tmp += convert(childNode);\n  });\n\n  return tmp;\n}\n\nfunction convert_default(node) {\n  let tmp = node.content;\n  if(SINGLE_TAGS.includes(node.name)) return tmp;\n\n  tmp += convert_root(node);\n  tmp += `</${node.name}>`;\n\n  return tmp;\n}\n\nfunction convert_cfelseif(node) {\n  return node.content.replace(/<cfelseif ([\\s\\S]*?)>/, (match, p1) => {\n    return `elsif ${expression_in_tag(p1)}\\n`;\n  });\n}\n\nfunction convert_cfset(node) {\n  if(node.content.match(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/))\n    return node.content.replace(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/, \"@error_msg << $1\")\n\n  return node.content.replaceAll(/<cfset ([\\w.]+?) = ([\\s\\S]*?)>/g, (match, p1, p2) => {\n    return `${p1} = ${expression_in_tag(p2)}`;\n  });\n}\n\nfunction convert_cfquery(node) {\n  let match = node.content.match(/name=\"(\\w+)\"/)\n  if(!match) return node.content;\n\n  let has_time_zone_now = params.has(\"time_zone_now\");\n  params.delete(\"time_zone_now\")\n  let args = Array.from(params);\n  let tmp = `def ${match[1]}(${args.join(\", \")})\\n`;\n\n  if(node.first().name === \"text\")\n    tmp += `\\tsql = \"${node.first().content}\"\\n`;\n  else tmp += '\\tsql = \"\"\\n';\n\n  node.children.forEach((childNode, index) => {\n    if(childNode.name === \"text\" && index === 0) return;\n    tmp += \"\\t\" + convert(childNode);\n  });\n\n  args = args.map((value) => `${value}: ${value}`)\n  tmp += `\\n\\tfind_by_sql [sql, {${args.join(\", \")}${has_time_zone_now ? \", time_zone_now: Time.zone.now\" : \"\"}}]`;\n  tmp += \"\\nend\";\n\n  return tmp;\n}\n","export const SINGLE_TAGS = [\n  \"cfset\", \"cfcontinue\", \"cfelse\", \"cfelseif\", \"cfqueryparam\", \"cfparam\", \"cfbreak\", \"cfinclude\"\n];\n\nexport function MyNode(name, content = \"\") {\n  this.name = name;\n  this.content = content;\n  this.children = [];\n\n  this.add = function(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  this.first = function(node) {\n    return this.children[0];\n  }\n}\n\nexport function parse(text) {\n  const data = text.split(/(<cf[\\s\\S]+?>|<\\/cf.*?>)/);\n  let root = new MyNode('root');\n\n  var parent = root;\n  data.forEach((t, index) => {\n    if(t.match(/<cf[\\s\\S]+?>/)) {\n      let match = t.match(/<(cf[a-z]+)[\\s\\S]*?>/);\n      if(match) {\n        const tag = new MyNode(match[1], match[0]);\n        parent.add(tag);\n        if(SINGLE_TAGS.includes(tag.name)) return;\n\n        parent = tag;\n      }\n    } else if (t.match(/<\\/cf.*?>/)) {\n      let match = t.match(/<\\/(cf.*?)>/);\n      if(match && match[1] === parent.name) parent = parent.parent;\n    } else {\n      parent.add(new MyNode('text', t))\n    }\n  });\n\n  return root;\n}\n\nexport function expression_in_tag(text) {\n  return text.trim()\n    .replaceAll(/is equal/gi, \"==\")\n    .replaceAll(/ eq /gi, \" == \")\n    .replaceAll(/ is not /gi, \" != \")\n    .replaceAll(/not equal/gi, \"!=\")\n    .replaceAll(/ neq /gi, \" != \")\n    .replaceAll(/greater than/gi, \">\")\n    .replaceAll(/ gt /gi, \" > \")\n    .replaceAll(/less than/gi, \"<\")\n    .replaceAll(/ lt /gi, \" < \")\n    .replaceAll(/greater than or equal to/gi, \">=\")\n    .replaceAll(/ gte /gi, \" >= \")\n    .replaceAll(/ ge /gi, \" >= \")\n    .replaceAll(/less than or equal to/gi, \"<=\")\n    .replaceAll(/ lte /gi, \" <= \")\n    .replaceAll(/ le /gi, \" <= \")\n    .replaceAll(/ is /gi, \" == \")\n    .replaceAll(/ and /gi, \" && \")\n    .replaceAll(/ or /gi, \" || \")\n    .replaceAll(/chkPermission\\(\"([\\w\"]+)\"\\) (is|==) 1/g, 'chk_permission?(\"$1\")')\n    .replaceAll(/IsNumeric\\(([\\w\"]+?)\\)/g, 'is_numeric?($1)')\n    .replaceAll(/ == \"\"/g, \".blank?\");\n}\n","import { SINGLE_TAGS, parse, expression_in_tag } from './lib';\n\nexport default function cfmToErb(text) {\n  return flow([parse, convert, remove_comment])(text);\n}\n\nfunction flow(cbs) {\n  return text => cbs.reduce((_, cb) => cb(_), text);\n}\n\nfunction convert(node) {\n  switch (node.name) {\n    case 'root':\n      return convert_root(node);\n    case 'cfif':\n      return convert_cfif(node);\n    case 'text':\n      return convert_text(node);\n    case 'cfelse':\n      return '<% else %>';\n    case 'cfelseif':\n      return convert_cfelseif(node);\n    case 'cfset':\n      return convert_cfset(node);\n    case 'cfbreak':\n      return '<% break %>';\n    case 'cfloop':\n      return convert_cfloop(node);\n    default:\n      return convert_default(node);\n  }\n}\n\nfunction convert_text(node){\n  let text = node.content;\n  text = text.replaceAll(/##/g, \"==@@\");\n  if(!text.match(/#/)) return text.replaceAll(\"==@@\", \"#\");\n\n  let arr = text.split(/([\"#'])/);\n\n  let begin = -1;\n  let countA = 0;\n  let countB = 0;\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] === \"#\") {\n      if(begin === -1) begin = i;\n\n      countA += 1;\n      if (countA > 0 && countA % 2 === 0 && countB % 2 === 0 && begin !== -1) {\n        arr[begin] = \"<%= \";\n        arr[i] = \" %>\";\n\n        countA = 0;\n        countB = 0;\n        begin = -1;\n      }\n      continue;\n    }\n\n    if(countA > 0 && (arr[i] === '\"' || arr[i] === \"'\")) {\n      countB += 1;\n      continue;\n    }\n  }\n\n  return arr.join(\"\").replaceAll(\"==@@\", \"#\");\n}\n\nfunction convert_cfif(node) {\n  let tmp = node.content.replaceAll(/<cfif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `<% if ${expression_in_tag(p1)} %>`;\n  });\n\n  if(node.children.length === 1 &&\n    node.first().name === \"text\" &&\n    node.first().content.trim().length < 50 &&\n    node.first().content.trim().length > 0) {\n\n    return tmp.replace(\"<% if\", `<%= \"${node.first().content.trim()}\" if`);\n  }\n\n  tmp += convert_root(node);\n  tmp += \"<% end %>\";\n\n  return tmp;\n}\n\nfunction convert_root(node) {\n  let tmp = \"\";\n  node.children.forEach((childNode) => {\n    tmp += convert(childNode);\n  });\n\n  return tmp;\n}\n\nfunction convert_default(node) {\n  let tmp = node.content;\n  if(SINGLE_TAGS.includes(node.name)) return tmp;\n\n  tmp += convert_root(node);\n  tmp += `</${node.name}>`;\n\n  return tmp;\n}\n\nfunction convert_cfelseif(node) {\n  return node.content.replaceAll(/<cfelseif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `<% elsif ${expression_in_tag(p1)} %>`;\n  });\n}\n\nfunction convert_cfset(node) {\n  return node.content.replaceAll(/<cfset ([\\w.]+?) = ([\\s\\S]*?)>/g, (match, p1, p2) => {\n    return `<% ${p1} = ${expression_in_tag(p2)} %>`;\n  });\n}\n\nfunction convert_cfloop(node) {\n  let index = node.content.match(/index=\"(\\w+?)\"/);\n  let from = node.content.match(/from=\"(\\w+?)\"/);\n  let to = node.content.match(/to=\"(\\w+?)\"/);\n  let step = node.content.match(/step=\"(\\w+?)\"/);\n  let query = node.content.match(/query=\"(\\w+?)\"/);\n\n  if(query) {\n    let tmp = `<% @${query[1]}.each do |${underscore(query[1])}| %>`\n    tmp += convert_root(node);\n    tmp += \"<% end %>\";\n    return tmp.replaceAll(query[1], underscore(query[1]));\n  }\n\n\n  if(index && from && to) {\n    let tmp = `<% ${from[1]}.step(${to[1]}).each do |${index[1]}| %>`;\n    if(step) tmp = `<% ${from[1]}.step(${to[1]}, ${step[1]}).each do |${index[1]}| %>`\n    tmp += convert_root(node);\n    tmp += \"<% end %>\";\n    return tmp;\n  }\n\n  return convert_default(node);\n}\n\nfunction underscore(text) {\n  return text.replaceAll(/(?=.)([A-Z])/g, (match, p1) => `_${p1.toLowerCase()}`)\n}\n\nfunction remove_comment(text) {\n  return text.replaceAll(/<!---[\\s\\S]*?--->/g, \"\");\n}\n","import { SINGLE_TAGS, parse, expression_in_tag } from './lib';\n\nexport default function cfmToErb(text) {\n  return flow([parse, convert, remove_comment])(text);\n}\n\nfunction flow(cbs) {\n  return text => cbs.reduce((_, cb) => cb(_), text);\n}\n\nfunction convert(node) {\n  switch (node.name) {\n    case 'root':\n      return convert_root(node);\n    case 'cfif':\n      return convert_cfif(node);\n    case 'text':\n      return convert_text(node);\n    case 'cfelse':\n      return 'else';\n    case 'cfelseif':\n      return convert_cfelseif(node);\n    case 'cfset':\n      return convert_cfset(node);\n    case 'cfbreak':\n      return 'break';\n    case 'cfloop':\n      return convert_cfloop(node);\n    default:\n      return convert_default(node);\n  }\n}\n\nfunction convert_text(node){\n  return node.content;\n}\n\nfunction convert_cfif(node) {\n  let tmp = node.content.replaceAll(/<cfif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `if ${expression_in_tag(p1)}`;\n  });\n\n  if(node.children.length === 1 &&\n    node.first().name === \"text\" &&\n    node.first().content.trim().length < 50 &&\n    node.first().content.trim().length > 0) {\n\n    return tmp.replace(\"if\", `\"${node.first().content.trim()}\" if`);\n  }\n\n  tmp += convert_root(node);\n  tmp += \"end\";\n\n  return tmp;\n}\n\nfunction convert_root(node) {\n  let tmp = \"\";\n  node.children.forEach((childNode) => {\n    tmp += convert(childNode);\n  });\n\n  return tmp;\n}\n\nfunction convert_default(node) {\n  let tmp = node.content;\n  if(SINGLE_TAGS.includes(node.name)) return tmp;\n\n  tmp += convert_root(node);\n  tmp += `</${node.name}>`;\n\n  return tmp;\n}\n\nfunction convert_cfelseif(node) {\n  return node.content.replaceAll(/<cfelseif ([\\s\\S]*?)>/g, (match, p1) => {\n    return `elsif ${expression_in_tag(p1)}`;\n  });\n}\n\nfunction convert_cfset(node) {\n  if(node.content.match(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/))\n    return node.content.replace(/<cfset error_msg = ListAppend\\(error_msg, (.*?)\\)>/, \"@error_msg << $1\")\n\n  return node.content.replaceAll(/<cfset ([\\w.]+?) = ([\\s\\S]*?)>/g, (match, p1, p2) => {\n    return `${p1} = ${expression_in_tag(p2)}`;\n  });\n}\n\nfunction convert_cfloop(node) {\n  let index = node.content.match(/index=\"(\\w+?)\"/);\n  let from = node.content.match(/from=\"(\\w+?)\"/);\n  let to = node.content.match(/to=\"(\\w+?)\"/);\n  let step = node.content.match(/step=\"(\\w+?)\"/);\n  let query = node.content.match(/query=\"(\\w+?)\"/);\n\n  if(query) {\n    let tmp = `@${query[1]}.each do |${underscore(query[1])}| %>`\n    tmp += convert_root(node);\n    tmp += \"end\";\n    return tmp.replaceAll(query[1], underscore(query[1]));\n  }\n\n\n  if(index && from && to) {\n    let tmp = `${from[1]}.step(${to[1]}).each do |${index[1]}|`;\n    if(step) tmp = `${from[1]}.step(${to[1]}, ${step[1]}).each do |${index[1]}|`\n    tmp += convert_root(node);\n    tmp += \"end\";\n    return tmp;\n  }\n\n  return convert_default(node);\n}\n\nfunction underscore(text) {\n  return text.replaceAll(/(?=.)([A-Z])/g, (match, p1) => `_${p1.toLowerCase()}`)\n}\n\nfunction remove_comment(text) {\n  return text.replaceAll(/<!---[\\s\\S]*?--->/g, \"\");\n}\n","import React, { useState } from 'react';\nimport cfmToErb from './cfmToErb';\nimport cfmToRb from './cfmToRb';\nimport cfquery from './cfquery';\n\nfunction Converter() {\n  const [mode, setMode] = useState(\"erb\");\n  const [cfm, setCfm] = useState(\"\");\n\n  const bt = (t) => t.replaceAll(\"\t\", \"  \");\n\n  const handleChangeTaCfm = (e) => {\n    const text = e.target.value;\n    setCfm(text);\n  }\n\n  const handleChangeSelect = (e) => {\n    setMode(e.target.value);\n  }\n\n  function convert_text(text) {\n    if(mode === \"erb\")\n      return bt(cfmToErb(text));\n    if(mode === \"rb\")\n      return bt(cfmToRb(text));\n    if(mode === \"cfquery\")\n      return bt(cfquery(text));\n  }\n\n  return (\n    <div className=\"Converter\">\n      <div className=\"select\">\n        <select value={mode} onChange={handleChangeSelect}>\n          <option value=\"erb\">Erb</option>\n          <option value=\"rb\">Rb</option>\n          <option value=\"cfquery\">cfquery</option>\n        </select>\n      </div>\n      <div className=\"box\">\n        <div className=\"cfm\">\n          <textarea className=\"ta_cfm\" onChange={handleChangeTaCfm} value={cfm} placeholder=\"cfm...\">\n          </textarea>\n        </div>\n        <div className=\"erb\">\n          <textarea className=\"ta_erb\" defaultValue={convert_text(cfm)} placeholder={`${mode}...`}>\n          </textarea>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Converter;\n","import Converter from './Converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter></Converter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}